#!/usr/bin/env ruby

require 'rubygems'
require "bundler/setup"
require 'commander/import'
require 'open-uri'
require 'nokogiri'
require 'uri'

program :name, "video-dl"
program :version, '1.1.1'
program :description, 'Download video easily'

default_command :download

command :download do |c|
  c.syntax = 'video-dl download http://some.url'
  c.description = 'Download a video'
  c.option '--bar STRING', String, 'Option bar with a string'
  c.action do |args, options|
  	options.default :bar => 'BAR'
  	# puts "Args: #{args}"
  	# puts "Option Bar: #{options.bar}"
  	url = args[0]
  	download_video(url)
  end
end

command :episodes do |c|
  c.syntax = 'video-dl episodes http://some.url'
  c.description = 'Download all the episodes of a drama'
  c.action do |args, options|
  	url = args[0]
  	download_all_episodes(url)
  end
end

command :html do |c|
  c.syntax = 'video-dl html http://some.url'
  c.description = 'Display the html of the url'
  c.action do |args, options|
    url = args[0]
  	display_html(url)
  end
end




########################################################################################
# Video Download
########################################################################################

def open_html(url)
  user_agent = ENV["VD_USERAGENT"] || "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/601.7.7 (KHTML, like Gecko) Version/9.1.2 Safari/601.7.7"
  cfduid = ENV["CFDUID"] || "dc161acc7c803d061e37601f99d3a613f1467552669"
  cfclearance = ENV["CFCLEARANCE"] || "fc5cc7b4944ed7e935b80ea3d38c1cdbdd3579ce-1470723829-1800"

  cookie_string = "__cfduid=#{cfduid};cf_clearance=#{cfclearance}"
  open_doc = open(url, 'User-Agent' => user_agent, "Cookie" => cookie_string)
  doc = Nokogiri::HTML(open_doc)
  return doc
end

def display_html(url)
  puts "Download URL #{url}"
  doc = open_html(url)
  puts doc
end

def download_video(url)
  puts "Downloading from #{url}"

  # Read the url HTML
  doc = open_html(url)
  # puts doc

  # Find the video title
  title = doc.css("h1[class='title']")[0].content
  puts "Title: #{title}"

  # doc.css("source[type='video/mp4']").each { |source|
  #   puts "Source: #{source['src']}"
  # }

  sources = doc.css("source[type='video/mp4']")
  videoUrl = findHighestRes(sources)
  if videoUrl != nil
    download(title, videoUrl)
    return
  end

  # Otherwise, video is in an iframe
  iframeSrc = doc.css('div#servermobile > iframe')[0]['src']
  puts "iframe src: #{iframeSrc}"

  # Read the iframe HTML
  doc = Nokogiri::HTML(open(iframeSrc))
  # puts doc

  # Finally we have the video url
  sources = doc.css("source[type='video/mp4']")
  videoUrl = findHighestRes(sources)
  if videoUrl != nil
    download(title, videoUrl)
    return
  else
    puts "Failed to find video url"
  end
end


# Run youtube-dl shell command
def download(title, videoUrl)
  puts "Video is at #{videoUrl}\n\n"
  cmd = "youtube-dl -o #{Shellwords.escape(title)}.mp4 #{Shellwords.escape(videoUrl)}"
  puts "Running #{cmd}"
  system(cmd)
end


# Find the highest resolution source from an array of sources like this:
# <source src="http://3.bp.blogspot.com/xyz" type="video/mp4" label="720"></source>
# Return the video url
def findHighestRes(sources)
  if sources.length > 0
    highestResSource = nil
    sources.each { |source|
      if highestResSource == nil
        highestResSource = source
      else
        if source['label'].to_i > highestResSource['label'].to_i
          highestResSource = source
        end
      end
    }
    # puts "Highest Res Source: #{highestResSource}"
    videoUrl = highestResSource['src']
    return videoUrl
  end
  return nil
end


def download_all_episodes(url)
  puts "Downloading all episodes from #{url}"

  uri = URI.parse(url)
  domain = "#{uri.scheme}://#{uri.host}"
  # puts "Domain: #{domain}"

  # Read the url HTML
  doc = Nokogiri::HTML(open(url))

  # Find the episode list
  episodes = doc.css("select[class='gotolistepisode'] > option")
  episodeUrls = []
  puts "Episodes:"
  episodes.reverse.each { |episode|
    episodeUrl = "#{domain}#{episode['value']}"
    puts "\tEpisode URL: #{episodeUrl}"
    episodeUrls.push(episodeUrl)
  }

  # Download each
  episodeUrls.each { |episodeUrl|
    download_video(episodeUrl)
  }
end
